#ALIAS FILE:
# A L I A S  F I L E
#20230921_14:10_est--EJR
#= GLOBAL VARIABLES =============================
b_ame="$HOME/a-me"; lvlbin="$b_ame/bin"; lvlmusic="$b_ame/z-share/z-music"
lvlterm='x-terminal-emulator -e'; z2run='>>/dev/null 2>&1 & disown'; TXT_a='history -s'; TXT_z='sleep 1s; xdotool key Up 1>/dev/null; echo'

#= GLOBAL FUNCTIONS =============================
ASKy() { echo -n "$1 [y/n]"; read -n 1 ASKy < /dev/tty; echo; if [ "${ASKy,,}" = "y" ]; then return 0; else return 1; fi; }
ASKn() { echo -n "$1 [y/n]"; read -n 1 ASKn < /dev/tty; echo; if [ "${ASKn,,}" = "y" ]; then return 1; else return 0; fi; }
SaN1ty() { read -n 1 -p '=== CONTINUE === ...(y/n)...' san; echo; [ "${san,,}" != "y" ] && exit 0; echo; }
crap() { read -n 1 -p '*ANY-KEY*'; echo; }
crab() { read -n 1 -p "$1 *ANY-KEY*"; echo; }
FUNC_nospaces() { local renamed_files=(); for i in "$@"; do nospacez=$(echo "$i" | tr " " "_"); mv "$i" "$nospacez" 2>/dev/null; renamed_files+=("$nospacez"); done; echo "${renamed_files[@]}"; }

#== BACKUP ======================================
alias TXT-rsync="$TXT_a 'sudo rsync -avh --delete --exclude=lost+found/ in/ out/'; $TXT_z"
alias X-tar2here='zloc=$(zenity --file-selection --multiple --separator=" " --title="Select items to tar"); base_dir=$(dirname $zloc | head -n 1); tar_name=$(basename $base_dir); tar -cvf "$tar_name-$(date +%Y%m%d_%H%M_est).tar" -C "$base_dir" $zloc'

#== BASIC (BASIC) ===============================
alias c='clear'
alias cls='clear && ls -a'
alias et='clear; tree -a'
alias TXT-symlink="$TXT_a 'ln -s \"\$HOME/a-me/PLACE/\" \"\$HOME/NEW_LINK\"'; $TXT_z"
alias X-ifs-current_setting='echo "Your Current IFS:"; printf %q "$IFS"; echo'

#== TIME ========================================
# Dependencies: Convert DateTime to Epochs: Unix & Post (utc & Local)
FUNC_time2unix-loc() { local ttz="$@"; ttz=$(date -d "$ttz" "+%s"); echo "$ttz"; }
FUNC_time2unix-utc() { local ttz="$@"; ttz=$(date -ud "$ttz" "+%s"); echo "$ttz"; }
FUNC_time2post-loc() { local ttz="$@"; ttz=$(date -d "$ttz" "+%s"); ttz=$((ttz - 946684800)) ;echo "$ttz"; }
FUNC_time2post-utc() { local ttz="$@"; ttz=$(date -ud "$ttz" "+%s"); ttz=$((ttz - 946684800)) ;echo "$ttz"; }
FUNC_time4unix-loc() { local ttz="$@"; ttz=$(date -d "@$ttz" "+%Y-%m-%d %H:%M:%S %Z"); echo "$ttz"; }
FUNC_time4unix-utc() { local ttz="$@"; ttz=$(date -ud "@$ttz" "+%Y-%m-%d %H:%M:%S %Z"); echo "$ttz"; }
FUNC_time4post-loc() { local ttz="$@"; ttz=$((ttz + 946684800)); ttz=$(date -d "@$ttz" "+%Y-%m-%d %H:%M:%S %Z"); echo "$ttz"; }
FUNC_time4post-utc() { local ttz="$@"; ttz=$((ttz + 946684800)); ttz=$(date -ud "@$ttz" "+%Y-%m-%d %H:%M:%S %Z"); echo "$ttz"; }
# Convert Unix epoch to PostgreSQL epoch
FUNC_time4unix2post() { local ttz="$@"; ttz=$((ttz - 946684800)); echo "$ttz"; }
FUNC_time4post2unix() { local ttz="$@"; ttz=$((ttz + 946684800)); echo "$ttz"; }
# TimeStamping
FUNC_timestamp-unix-sec() { local renamed=($(FUNC_nospaces "$@")); for nospacez in "${renamed[@]}"; do mv "$nospacez" "$(date +%s)-$nospacez"; done; }
FUNC_timestamp-unix-mil() { local renamed=($(FUNC_nospaces "$@")); for nospacez in "${renamed[@]}"; do mv "$nospacez" "$(date +%s%3N)-$nospacez"; done; }
FUNC_timestamp-post-sec() { local renamed=($(FUNC_nospaces "$@")); for nospacez in "${renamed[@]}"; do postgre_epoch=$(e-time2post-est.ef "$nospacez"); mv "$nospacez" "$(date -d "@$postgre_epoch" +%s)-$nospacez"; done; }
FUNC_timestamp-post-mil() { local renamed=($(FUNC_nospaces "$@")); for nospacez in "${renamed[@]}"; do postgre_epoch=$(e-time2post-est.ef "$nospacez"); mv "$nospacez" "$(date -d "@$postgre_epoch" +%s%3N)-$nospacez"; done; }
FUNC_timestamp-time-loc() { local renamed=($(FUNC_nospaces "$@")); for nospacez in "${renamed[@]}"; do mv "$nospacez" "$(date +%Y%m%d_%H%M%S_loc)-$nospacez"; done; }
FUNC_timestamp-time-utc() { local renamed=($(FUNC_nospaces "$@")); for nospacez in "${renamed[@]}"; do mv "$nospacez" "$(date -u +%Y%m%d_%H%M%S_utc)-$nospacez"; done; }
# Time Misc
alias X-time-epoch='echo -e "$(date +%Y-%m-%d_%H-%M-%S)\tloc\n$(date -u +%Y-%m-%d_%H-%M-%S)\tUTC\n$(date +%s%3N)\t\tms\n$(date +%s)\t\ts"'
alias TXT-time2all="$TXT_a 't=\"YYYY-MM-DD HH:MM:SS\"; unix_loc=\$(FUNC_time2unix-loc \"$t\"); unix_utc=\$(FUNC_time2unix-utc \"$t\"); post_loc=\$(FUNC_time2post-loc \"$t\"); post_utc=\$(FUNC_time2post-utc \"$t\"); echo -e \"\$t\tYourInput\n\$unix_loc\t\tUnix(loc)\n\$unix_utc\t\tUnix(UTC)\n\$post_loc\t\tPost(loc)\n\$post_utc\t\tPost(UTC)\"'; $TXT_z"
alias TXT-time4unix="$TXT_a 't=\"1231231231\"; dtloc=\$(FUNC_time4unix-loc \"$t\"); dtutc=\$(FUNC_time4unix-utc \"$t\"); dtpost=\$(FUNC_time4unix2post \"$t\"); echo -e \"\$t\tYourInput\n\$dtloc\t\tDT(loc)\n\$dtutc\t\tDT(utc)\n\$dtpost\t\tPost(utc)\n\"'; $TXT_z"

#== NETWORK STUFF ===============================
#..ADB..
alias X-adb-plugdev="sudo usermod -aG plugdev $LOGNAME"
alias X-adb-kill='killall adb; rm -R ~/.android/'
#..BARRIER..
alias X-barrier='sudo ufw disable; barrier >>/dev/null 2>&1 & disown'
alias X-barrieroff='pkill barrier; sleep 1; sudo ufw enable'
alias X-barrierinfo='clear; echo "disable ssl on host and clients in the app"'

#== CODING ======================================
#..HTML..
alias X-html-here="cp -r $b_ame/z-share/z-html-starter/* ./"
alias TXT-http-serve="$TXT_a 'python3 -m http.server'; $TXT_z"
FUNC_http-serve-gui() { local directory; directory=$(zenity --file-selection --directory --title="Select a directory to serve" 2>/dev/null); if [[ -n "$directory" ]]; then cd "$directory" || return; python3 -m http.server; fi; }
alias TXT-download-webiste="$TXT_a 'wget --exclude-directories=explorer -r -np -mpEk https://learnmeabitcoin.com/'; $TXT_z"
#..ZZ/ZZZ..
alias X-zz-edit="xed $lvlbin/e-zz.eb $z2run"
alias X-zzz-edit="xed $lvlbin/e-zzz.eb $z2run"

#== EDITING COMPARING ===========================
FUNC_duplicate-deleter() { clear; declare -A seen_files; for file in *; do [[ -f "$file" ]] || continue; checksum=$(md5sum "$file" | cut -d' ' -f1); if [[ ${seen_files[$checksum]} ]]; then echo "-----Deleting: $file-----"; sudo rm "$file"; else seen_files[$checksum]=$file; fi; done; }
FUNC_duplicate-checker() { clear; declare -A seen_files; for file in *; do [[ -f "$file" ]] || continue; checksum=$(md5sum "$file" | cut -d' ' -f1); if [[ ${seen_files[$checksum]} ]]; then echo "Found a duplicate: $file"; else seen_files[$checksum]=$file; fi; done; }
alias TXT-compare-comm="$TXT_a 'comm -23 <(sort -n new.txt) <(sort -n old.txt) >added.txt'; $TXT_z"
alias TXT-cat-tabwidth="$TXT_a 'cat zzz.txt | expand -t2'; $TXT_z"
alias TXT-textfold="$TXT_a 'fold -s -w80 X'; $TXT_z"
alias TXT-csv-sort-dedup="$TXT_a 'tail -n +2 x.csv | sort | uniq > x2.csv'; $TXT_z"
FUNC_csv-combiner() { rm /tmp/head.csv /tmp/nohead.csv /tmp/body.csv; zins=$(zenity --title='Select CSV Files' --file-selection --multiple --file-filter='CSV files | *.csv' --separator=' '); zout=$(zenity --title='Save Output Csv File' --file-selection --save --confirm-overwrite --file-filter='CSV files | *.csv'); if [ -z "$zins" ] || [ -z "$zout" ]; then zenity --error --text "File selection canceled."; return; fi; for i in ${zins}; do head -n 1 "$i" > /tmp/head.csv; done; for i in ${zins}; do tail -n +2 "$i" >> /tmp/nohead.csv; done; sort -u /tmp/nohead.csv -o /tmp/body.csv; cat /tmp/head.csv /tmp/body.csv > "$zout"; sed -i -e '$a\' "$zout"; rm /tmp/head.csv /tmp/nohead.csv /tmp/body.csv; }

#== CONFIG ======================================
alias TXT-dconf2txt="$TXT_a 'dconf dump / > dconf_all.txt'; $TXT_z"
alias TXT-txt2dconf="$TXT_a 'dconf load / < dconf_all.txt'; $TXT_z"
alias X-watch-dconf='dconf watch /'
alias X-watch-dconf-journals='journalctl -f | grep dconf'

#== IO ==========================================
# encoding/decoding
alias X-io-base64-xclip-e='xclip -o -selection clipboard | base64 | xclip -selection clipboard'
alias X-io-base64-xclip-d='xclip -o -selection clipboard | base64 --decode | xclip -selection clipboard'
alias TXT-io-base64-e="$TXT_a 'echo -n \"ZZZ\" | base64'; $TXT_z"
alias TXT-io-base64-d="$TXT_a 'echo -n \"\ZZZ\" | base64 --decode'; $TXT_z"
# Misc
alias XI-txt2figit="read -p 'FIGLET:' figitaaa; figlet -f slant \$figitaaa | sed -n 's/^.*/#&/p'"
alias TXT-txt2tts="$TXT_a 'spd-say -w \"\$(cat file.txt)\"'; $TXT_z"
# Audio & Video
alias TXT-io-av2av="$TXT_a 'ffmpeg -i IN OUT'; $TXT_z"
alias TXT-io-opus2lq="$TXT_a 'ffmpeg -i IN -c:a libopus -b:a 16k OUT'; $TXT_z"
FUNC_io-av2join() { local ztmp="/tmp/join.txt"; local input_files=$(zenity --title='Select AV Files To JOIN' --file-selection --multiple --separator=$'\n' --file-filter='*.*'); if [ $? == 1 ]; then return; fi; local outname=$(zenity --width=400 --height=200 --entry --title='NAME OUTPUT FILE' --text='Name Output File with ext:' --entry-text "name.ext"); if [ $? == 1 ]; then return; fi; local output_dir=$(zenity --file-selection --directory --title='Select Output Folder'); if [ $? == 1 ]; then return; fi; zenity --width=700 --height=700 --info --title='Files To Be Joined:' --text="$input_files\n---Destination---\n$output_dir/$outname"; if [ $? == 1 ]; then return; fi; echo -e "$input_files" >$ztmp; sed -i -e "s/^/file '/" $ztmp; sed -i -e "s/$/'/" $ztmp; ffmpeg -f concat -safe 0 -i $ztmp -c copy "${output_dir}/$outname"; rm $ztmp; }
# Video
alias TXT-io-vid2mute="$TXT_a 'ffmpeg -f lavfi -i aevalsrc=0 -i IN -c:v copy -c:a aac -map 0 -map 1:v -shortest OUT'; $TXT_z"
FUNC_io-vid2loudness-gui() { local input=$(zenity --file-selection --title="Select Video File" --file-filter="Video files | *.mp4 *.avi *.mkv *.mov *.flv *.wmv *.webm *.m4v" --file-filter="All files | *"); if [ -z "$input" ]; then zenity --error --text="No file selected. Exiting."; return 1; fi; local vol; clear; echo 'Enter Volume Multiplier Number'; read vol; local old="${input%.${input##*.}}-OLD.${input##*.}"; mv "$input" "$old"; rm $input; ffmpeg -i "$old" -af volume="$vol" -c:v copy "$input"; rm "$old"; }
alias TXT-io-vid2loudness="$TXT_a 'ffmpeg -i IN.mp4 -af volume=XXX -c:v copy OUT.mp4'; $TXT_z"
FUNC_io-vid2trim-gui() { local input=$(zenity --file-selection --title="Select Video to Chop"); if [[ -z "$input" ]]; then echo "No video selected. Aborting."; return 1; fi; local filename=$(basename "$input"); local extension="${filename##*.}"; local filename_noext="${filename%.*}"; local output="$input"; local old="$filename_noext-old.$extension"; mv "$input" "$old"; celluloid "$old" & sleep .5; local start_time=$(zenity --entry  --title='START?' --text='HH:MM:SS' --entry-text="00:00:00"); local end_time=$(zenity --entry --title='END?' --text='HH:MM:SS' --entry-text="$start_time"); pkill celluloid; ffmpeg -i "$old" -ss "$start_time" -to "$end_time" -c:v copy -c:a copy "$output"; rm "$old"; clear; echo "Done: $output"; }
alias TXT-io-vid2trim="$TXT_a 'ffmpeg -i INPUT.mp4 -ss 00:00:00 -to 00:00:00 -c:v copy -c:a copy OUTPUT.mp4'; $TXT_z"
alias TXT-io-yt2mp4="$TXT_a 'yt-dlp -f best -o \"X.mp4\" \"URL\"'; $TXT_z"
# Audio
alias TXT-io-yt2mp3="$TXT_a 'yt-dlp -f bestaudio -x --audio-format mp3 --audio-quality 0 --output \"X.mp4\" \"URL\"'; $TXT_z"
# IMG
alias TXT-io-img2rotate="$TXT_a 'convert IN.png -background none -rotate 45 -trim +repage OUT.png'; $TXT_z"
alias TXT-io-img2gif-make="$TXT_a 'convert -delay 33 -dispose previous -filter triangle -loop 0 *.png animated.gif'; $TXT_z"
alias TXT-io-img2img="$TXT_a 'for i in *.jpg; do convert \$i ../dir/\${i%.*}.png; done'; $TXT_z"
alias TXT-io-img2montage="$TXT_a 'montage \$(for i in *.jpg; do convert -auto-orient \"\$i\" -rotate 0 \"\$i\"; echo \"\$i\"; done) -tile 5x5 -geometry +2+2 output.jpg'; $TXT_z"
alias TXT-io-img2stack="$TXT_a 'convert -append 1.png 2.png 3.png OUTPUT.png'; $TXT_z"
alias TXT-io-img2txt="$TXT_a 'tesseract IN ocr'; $TXT_z"
alias TXT-io-img2resize="$TXT_a 'for i in *.png; do convert \$i -resize 1000x1500 ../\${i%.*}.png; done'; $TXT_z"
alias TXT-io-img2strip="$TXT_a 'mogrify -strip z.zzz'; $TXT_z"
FUNC_io-img2stack-gui() { local input_files=$(zenity --file-selection --title="Select image files" --file-filter="Image files | *.png *.jpg *.jpeg" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No image files selected."; return 1; fi; local output_file=$(zenity --file-selection --save --confirm-overwrite --title='Save: NAME.EXT (png; jpg; etc..)'); if [ -z "$output_file" ]; then echo "No output file selected."; return 1; fi; convert -append $input_files "$output_file"; }
# PDF
alias TXT-io-img2pdf="$TXT_a 'img2pdf 1.png 2.png 3.png -o OUTPUT.pdf'; $TXT_z"
FUNC_io-img2pdf-gui() { local input_files=$(zenity --file-selection --title="Select image files" --file-filter="Image files | *.png *.jpg *.jpeg" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No image files selected."; return 1; fi; local output_file=$(zenity --file-selection --save --confirm-overwrite --title='Save: NAME.pdf'); if [ -z "$output_file" ]; then echo "No output file selected."; return 1; fi; img2pdf $input_files -o "$output_file"; }
alias TXT-io-pdf2img-jpeg="$TXT_a 'pdftoppm -jpeg INPUT.pdf OUTPUT-PREFIX'; $TXT_z"
FUNC_io-pdf2img-jpeg-gui() { local input_files=$(zenity --file-selection --title="Select PDF files" --file-filter="PDF files | *.pdf" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No PDF files selected."; return 1; fi; for i in $is; do opre="${i%.pdf}"; pdftoppm -jpeg "$i" "$opre"; done; }
alias TXT-io-pdf2img-png="$TXT_a 'pdftoppm -png INPUT.pdf OUTPUT-PREFIX'; $TXT_z"
FUNC_io-pdf2img-png-gui() { local input_files=$(zenity --file-selection --title="Select PDF files" --file-filter="PDF files | *.pdf" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No PDF files selected." ;return 1; fi; for i in $input_files; do opre="${i%.pdf}"; pdftoppm -png "$i" "$opre"; done; }
# QR
alias TXT-io-qr2term="$TXT_a 't=\"DATA\"; qrencode -t ANSIUTF8 --margin=2 \"\${t}\"'; $TXT_z"
alias TXT-io-qr2img="$TXT_a 't=\"DATA\"; qrencode -o qr.png -s 10 --margin=1 \"\${t}\"'; $TXT_z;"
alias TXT-io-qr2img-transparent="$TXT_a 't=\"DATA\"; qrencode -o qr.png -s 10 --foreground=000000FF --background=00000000 --margin=1 \"\${t}\"'; $TXT_z"
alias TXT-io-qr2read="$TXT_a 'zbarimg QR-IMG-IN.IMG'; $TXT_z"

#== APPLICATION MANAGEMENT ======================
#==Fixs/Deps/etc==
alias X-fix-imagemagic-pdf-issue="sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml"
alias TXT-pips="$TXT_a 'pip install --upgrade yt-dlp; pip install mnemonic ecdsa pycryptodome pyperclip qrcode nltk; python -m nltk.downloader averaged_perceptron_tagger'; $TXT_z"
#==Specific Application==
alias X-bleach-chrome="bleachbit --clean google_chrome.cache google_chrome.history google_chrome.vacuum"
alias X-bleach-locales="sudo bleachbit --clean system.locales"
alias TXT-vbox-user-config="$TXT_a 'sudo usermod -a -G vboxusers $USER'; $TXT_z"
alias TXT-projectm-copy2fs="$TXT_a 'sudo rsync -avh --delete --exclude=lost+found/ ~/a-me/z-share/projectm/all/ /var/lib/flatpak/app/net.sourceforge.projectM/current/active/files/share/projectM/presets/all'; $TXT_z"
#==INFO==
alias TXT-apt-info-apt="$TXT_a 'apt-cache --no-all-versions show zzz'; $TXT_z"
alias TXT-dpkg-list="$TXT_a 'dpkg -l'; $TXT_z"
alias TXT-dpkg-status="$TXT_a 'dpkg -s zzz'; $TXT_z"
#==INSTALL==
alias TXT-installvia-apt="$TXT_a 'sudo apt install -y'; $TXT_z"
alias TXT-installvia-deb="$TXT_a 'sudo gdebi z.deb --n'; $TXT_z"
alias TXT-installvia-flatpak="$TXT_a 'sudo flatpak install -y flathub XXX'; $TXT_z"
#==UNINSTALL==
alias TXT-uninstallvia-apt="$TXT_a 'sudo apt purge --auto-remove -y'; $TXT_z"
alias TXT-uninstallvia-flatpak="$TXT_a 'flatpak uninstall --delete-data -y XXX'; $TXT_z"
